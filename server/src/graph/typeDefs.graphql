################################################################################
## Custom Scalar Types
################################################################################

# Date represented as an ISO8601 string.
scalar Date

# The possible types of badge granters
 enum GRANTER_TYPES {

    NONPROFIT

    COMPANY

    EDUCATIONAL

    COMMUNITY_GROUP

 }

# The possible types of granter notifications
 enum GRANTER_NOTIFICATION_STATUS {

    ACTIVE

    RESOLVED

    IGNORED

 }

# A unique account in the system. In the future this information will be encrypted.
type User {

  # The ID of the user
  id: ID!

  # Display names utilized by this user
  displayNames: [String]

  # Icons uploaded by this user
  images: [String]

  # Badges owned by this user
  badges: [Badge]

  # Nametags created by this user
  nametags: [Nametag]

  # Granters administered by this user
  granters: [Granter]

  # Time when the user was created
  createdAt: Date!

  # Templates from organizations that this user administers
  adminTemplates: [Template]

}

# A room where discussions can take place
type Room {

  # The ID of the room
  id: ID!

  # The title of the room
  title: String!

  # The norms of the room
  norms: [String!]

  # The room's moderator
  mod: Nametag!

  # The date when the room was created
  createdAt: Date!

  # The messages sent in the room
  messages: [Message]

  # The nametags of the individuals in the room
  nametags: [Nametag]

  # The number of nametags currently in the room
  nametagCount: Int!

  # The latest message in this room
  latestMessage: Date

  # Count of new nametags
  newNametagCount: Int!

  # Count of new messages
  newMessageCount: Int!

  # Templates required to view and enter the room
  templates: [Template]

  # Indicates whether the DMs are limited to messages to and from Mods
  modOnlyDMs: Boolean

  # A message to welcome new users into the room
  welcome: String

  # Topic of discussion in the room
  topic: String

  # Indicates whether a room is closed
  closed: Boolean
}

# A topic of discussion in a room
type Topic {
  # A description of the topic
  description: String!

  # The time when the topic was set
  setAt: Date!
}

# A message in a room
type Message {

  # The ID of the message
  id: ID!

  # The text of the message
  text: String!

  # The nametag ID of the message's author
  author: Nametag

  # The nametag ID of the message's recipient. If this is defined then this is a direct message.
  recipient: Nametag

  # The id of the room that where the message was created
  room: Room!

  # Emoji reactions to the message
  reactions: [EmojiReaction]

  # Indicates whether the message has been saved for viewing after the room has closed
  saved: Boolean

  # Time when the message was created
  createdAt: Date!

  # Offers a badge in a message
  template: Template
}

# Emoji reactions to a message
type EmojiReaction {
  # The emoji of the reaction
  emoji: String!

  # The nametag of the person who provided this reaction
  nametagId: ID!

}

# A representation of a user's identity in a particular room
type Nametag {

  # The ID of the nametag
  id: ID!

  # The name of the user
  name: String!

  # The url of the user's image
  image: String

  # Further information about the user
  bio: String

  # Badges attached to this nametag
  badges: [Badge]

  # Time when the nametag was created
  createdAt: Date!

  # Indicates whether the nametag is present in the current room
  present: Boolean

  # Indicates when a user has been mentioned in other rooms
  mentions: [Date]

  # The room where the nametag is posted. May be null if this is a template nametag.
  room: Room

  # The template that this Nametag is created for. May be null if this a room Nametag.
  template: Template

  # The badge that this Nametag is created for. May be null if this a room Nametag or if
  # this is a badge template nametag that is not yet assigned.
  badge: Badge

  # Latest visit to this nametag's room by the nametag holder
  latestVisit: Date

  # Indicates whether a user has been banned from a room
  banned: Boolean

}

# A verified component of a user's identity
type Badge {
  # The ID of the badge
  id: ID!

  # The template from which this badge is created
  template: Template

  # Notes appended to the badge
  notes: [Note]

  # Default nametag for the badge visible to the badge granter
  defaultNametag: Nametag

  # Time when the badge was created
  createdAt: Date!

}

# A note attached to a badge
type Note {

  # The date when the note was created
  date: Date!

  # The text of the note
  text: String!

}

# A verified component of a user's identity
type Template {
  # The ID of the badge
  id: ID!

  # The name of the badge
  name: String!

  # The image for the badge
  image: String

  # The badges description
  description: String

  # The organization or group granting the badge
  granter: Granter

  # The badges that have been granted based on this template
  badges: [Badge]

  # Indicates whether badges from this template must be manually approved or is granted automatically.
  approvalRequired: Boolean!

  # Time when the badge template was created
  createdAt: Date!

  # Time when the badge template was updated
  updatedAt: Date!

}

# An organization or individual capable of granting a badge
type Granter {

  # The id of the badge granter
  id: ID!

  # The name of the granter
  name: String!

  # A description of the granter
  description: String!

  # An image to use when referencing the granter
  image: String!

  # Badges verifying the granter
  templates: [Template]

  # Badge Requests for this granter
  badgeRequests: [BadgeRequest]

  # The type of granter
  type: GRANTER_TYPES!

  # Time when the badge granter was created
  createdAt: Date!

  # Time when the badge granter was updated
  updatedAt: Date!

  # URL code for this granter
  urlCode: String!

  # List of administrators
  adminTemplate: Template

}

# An interface for notifications viewable to badge granters
interface GranterNotification {

  # The id of the notification
  id: ID!

  # The status of the notification
  status: GRANTER_NOTIFICATION_STATUS!

  # The date when the notification was created
  createdAt: Date!

  # The granter to receive this notification
  granter: Granter!

}

# Notifies granters of a badge request
type BadgeRequest implements GranterNotification {

  # The id of the notification
  id: ID!

  # The status of the notification
  status: GRANTER_NOTIFICATION_STATUS!

  # The date when the notification was created
  createdAt: Date!

  # The granter to receive this notification
  granter: Granter!

  # The badge template being requested
  template: Template

  # The nametag requesting the badge
  nametag: Nametag

}


# Alerts badge granters of messages transmitted in their rooms
type ModAlert implements GranterNotification {

  # The id of the notification
  id: ID!

  # The status of the notification
  status: GRANTER_NOTIFICATION_STATUS!

  # The date when the notification was created
  createdAt: Date!

  # The granter to receive this notification
  granter: Granter!

  # The nametag of the mod sending the alert
  mod: Nametag

  # The room from which the alert was sent
  room: Room

  # The norms marked as being violated
  norms: [String!]

  # The message violating these norms
  message: String

  # An optional note from the Moderator
  note: String

}

# The queries available for Nametag
type RootQuery {

  # Retrieves a single room based on the id
  room(id:ID!): Room

  # Retrieves all active rooms in the system. May optionally include a specific id.
  rooms(query: String, granter: String): [Room]

  # Retrieves the current user
  me: User

  # Retrieves information about a badge granter
  granter(urlCode:String!): Granter

  # Retrieves information about a badge template
  template(id: ID!): Template

}

################################################################################
## Mutations
################################################################################

# Response defines what can be expected from any response to a mutation action.
interface Response {

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

## Inputs

# Input required in order to create a room
input CreateRoomInput {

  # The room's title
  title: String!

  # An optional welcome message
  welcome: String!

  # The ID of the room's moderator
  mod: CreateNametagInput!

  # An array of the room's norms
  norms: [String!]

  # An array of templates required to view and enter the room
  templates:[ID!]

  # Indicates whether the room should be displayed on the homepage and in searches
  public: Boolean!

}

# Input required in order to create a message
input CreateMessageInput {

  # The content of the message
  text: String!

  # The nametag ID of the message's author
  author: ID!

  # The ID of the room where the message takes place
  room: ID!

  # The recipient of the message if it is a DM
  recipient: ID

}

# Input required to update a room

input UpdateRoomInput {

  # The room's title
  title: String

  # A description for the room
  description: String

  # An array of the room's norms
  norms: [String!]

  # The welcome given for the room
  welcome: String

  # The current topic in a room
  topic: String

  # Indicates whether the room is closed
  closed: Boolean

  # Indicates whether users other than the mod can DM one another.
  modOnlyDMs: Boolean

}

# Input required to create a nametag
input CreateNametagInput {

  # The content of the message
  name: String!

  # The nametag's image
  image: String

  # Additional information about the user
  bio: String

  # Sets whether DMing is limited to modOnlyDMs
  modOnlyDMs: Boolean

  # IDs of badges to include in this Nametag
  badges: [ID]

  # The room that this nametag is joining
  room: ID

  # The badge template this nametag is requesting
  template: ID

}

# Input to update a nametag
input UpdateNametagInput {

  # The content of the message
  name: String

  # The nametag's image
  image: String

  # Additional information about the user
  bio: String

  # IDs of badges to include in this Nametag
  badges: [ID]

  #Indicates whether the user has been banned
  banned: Boolean

}

# Input required to create a badge
input CreateTemplateInput {

  # The name of the template
  name: String!

  # The template's image
  image: String!

  # The template's description
  description: String!

  # The template's granter
  granter: ID!

  # Indicates whether badges from this template require approval to be granted
  approvalRequired: Boolean!

}

# Input required to create a badge
input CreateBadgeInput {

  # The badge's template
  template: ID!

  # Additional information appended to the badge
  note: String!

  # Default nametag for this badge
  defaultNametag: ID!

}

input CreateGranterInput {

  # The name of the granter
  name: String!

  # A description of the granter
  description: String!

  # An image to use when referencing the granter
  image: String!

  # A unique code used for the granter's url
  urlCode: String!

  # The type of granter
  type: GRANTER_TYPES!

}

# Input required to update a nametag

## Responses

# CreateRoomResponse is returned with the room that was created and any
# errors that may have occurred in the attempt to create it.
type CreateRoomResponse implements Response {

  # The comment that was created.
  room: Room

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateMessageResponse is returned with the message that was created and any
# errors that may have occurred in the attempt to create it.
type CreateMessageResponse implements Response {

  # The comment that was created.
  message: Message

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateNametagResponse is returned with the nametag that was created and any
# errors that may have occurred in the attempt to create it.
type CreateNametagResponse implements Response {

  # The comment that was created.
  nametag: Nametag

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateBadgeResponse is returned with the badge that was created and any
# errors that may have occurred in the attempt to create it.
type CreateBadgeResponse implements Response {

  # The comment that was created.
  badge: Badge

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateGranterResponse is returned with the badge granter that was created and any
# errors that may have occurred in the attempt to create it.
type CreateGranterResponse implements Response {

  # The comment that was created.
  granter: Granter

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# Basic Response including only errors
type BasicResponse implements Response {

  #Optionally, include an id of a newly created object
  id: ID

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]

}

# The mutations available for Nametag
type RootMutation {

  # Creates a room
  createRoom(room: CreateRoomInput!): CreateRoomResponse

  # Updates a room
  updateRoom(roomId: ID!, roomUpdate: UpdateRoomInput!): BasicResponse

  # Creates a message
  createMessage(message: CreateMessageInput!): CreateMessageResponse

  # Deletes a message
  deleteMessage(messageId: ID!, roomId: ID!): BasicResponse

  # Creates a nametag
  createNametag(nametag: CreateNametagInput!): CreateNametagResponse

  # Updates a nametag
  updateNametag(nametagId: ID!, nametagUpdate: UpdateNametagInput!): BasicResponse

  # Creates a badge
  createBadge(badge: CreateBadgeInput!): CreateBadgeResponse

  # Creates a badge template
  createTemplate(template: CreateTemplateInput!): BasicResponse

  # Creates a badge granter
  createGranter(granter: CreateGranterInput!): CreateGranterResponse

  # Adds a reaction to a message
  addReaction(messageId: ID!, emoji: String!, nametagId: ID!): BasicResponse

  # Saves a message
  toggleSaved(messageId: ID!, saved: Boolean!): BasicResponse

  # Updates the latest visit of a nametag
  updateLatestVisit(nametagId: ID!): BasicResponse

  # Indicated that a user is typing in a particular room
  showTypingPrompt(nametagId: ID!, roomId: ID!): BasicResponse

  # Updates the users's notification token
  updateToken(token: String!): BasicResponse

  # Updates the status of a badge request
  updateBadgeRequestStatus(badgeRequest: ID!, status: GRANTER_NOTIFICATION_STATUS!): BasicResponse

  # Adds a note to badge
  addNote(badgeId: ID!, text: String!): BasicResponse

  # Creates a password reset request
  passwordResetRequest(email: String!): BasicResponse

  # Resets a password
  passwordReset(token: String!, password: String!): BasicResponse

  # Requests an email confirmation
  emailConfirmationRequest(email: String!): BasicResponse

  # Confirms an email
  emailConfirmation(token: String!): BasicResponse

  # Unsubscribes from a room
  unsubscribe(userToken: String!, roomId: String!): BasicResponse

  # Approves a public room
  approveRoom(roomId: ID!): BasicResponse

  # Bans a user from a room
  banNametag(roomId: ID!, nametagId: ID!): BasicResponse

}

################################################################################
## Subscriptions
################################################################################

type NametagPresence {

  # The id of the nametag to be updated
  nametagId: ID!

  # Indicates whether the nametag is present
  present: Boolean!

}

type LatestMessageUpdate {

  # The id of the room to be updated
  roomId: ID!

  # The new value of latestMessage
  latestMessage: Date!
}

# Update to a room

type UpdateRoom {

  # The ID of the room being updated
  id: ID!

  # The room's title
  title: String

  # A description for the room
  description: String

  # The image to be displayed on the room's card
  image: String

  # An array of the room's norms
  norms: [String!]

  # Sets whether or not DMing is limited to models
  modOnlyDMs: Boolean

  # The welcome given for the room
  welcome: String

  # The current topic of discussion in the room
  topic: String

  # Indicates whether a room has been closed
  closed: Boolean

}

# Update to a nametag
type UpdateNametag {

  # The ID of the nametag being update
  id: ID!

  # The id of the room to where this nametag is used
  room: ID!

  # The content of the message
  name: String

  # The nametag's image
  image: String

  # Additional information about the user
  bio: String

  # Badges to include in this Nametag
  badges: [Badge]

  # Indicates whether the owner of this nametag is present in the room
  present: Boolean

  # Indicated whether the user is banned
  banned: Boolean
}

# Id Only
type IDOnly {
  # The ID of the object to be updated
  id: ID!
}

# Typing Prompt
type typingPrompt {
  # The ID of the nametag currently typing
  nametagId: ID!
}


type RootSubscription {

  # Fired when a message is added to a room
  messageAdded(roomId: ID!, nametagId: ID!): Message

  # Fired when a message is deleted from a room
  messageDeleted(roomId: ID!): IDOnly

  # Fired when a nametag is added to a room
  nametagAdded(roomId: ID!): Nametag

  # Fired when a nametag's presence changes in a room
  nametagPresence(roomId: ID!): NametagPresence

  # Fired when a user is typing
  typingPromptAdded(roomId: ID!): typingPrompt

  # Fired when a new badgeRequest is created
  badgeRequestAdded(granterId: ID!): BadgeRequest

  # Fired when a room's latestMessage value is updated
  latestMessageUpdated(roomIds: [ID!]): LatestMessageUpdate

  # Fired when data about a room is updated
  roomUpdated(roomId: ID!): UpdateRoom

  # Fired when data about a nametag is updated
  nametagUpdated(roomId: ID!): UpdateNametag
}

################################################################################
## Errors
################################################################################

# Any error rendered due to the user's input.
type UserError {

  # Translation key relating to a translatable string containing details to be
  # displayed to the end user.
  translation_key: String
  message: String!
}

schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscription
}
