################################################################################
## Custom Scalar Types
################################################################################

# Date represented as an ISO8601 string.
scalar Date

# A unique account in the system. In the future this information will be encrypted.
type User {

  # The ID of the user
  id: ID!

  # Display names utilized by this user
  displayNames: [String]

  # Icons uploaded by this user
  icons: [String]

  # Badges owned by this user
  badges: [Badge]

  # Nametags created by this user
  nametags: [Nametag]

}

# A room where discussions can take place
type Room {

  # The ID of the room
  id: ID!

  # The title of the room
  title: String!

  # The description of the room
  description: String!

  # The url of the room's image
  image: String!

  # The norms of the room
  norms: [String!]

  # The room's moderator
  mod: Nametag!

  # The date when the room was created
  createdAt: Date!

  # The date when the room closes
  closedAt: Date!

  # The messages sent in the room
  messages: [Message]

  # The nametags of the individuals in the room
  nametags: [Nametag]

  # The number of nametags currently in the room
  nametagCount: Int!

  # The latest message in this room
  latestMessage: Date

}

# A message in a room
type Message {

  # The ID of the message
  id: ID!

  # The text of the message
  text: String!

  # The nametag ID of the message's author
  author: Nametag!

  # The nametag ID of the message's recipient. If this is defined then this is a direct message.
  recipient: Nametag

  # The id of the room that where the message was created
  room: Room!

  # Indicates whether the message has been saved for viewing after the room has closed
  saved: Boolean

  # Time when the message was created
  createdAt: Date!

}

# A representation of a user's identity in a particular room
type Nametag {

  # The ID of the nametag
  id: ID!

  # The name of the user
  name: String!

  # The url of the user's icon
  icon: String!

  # Further information about the user
  bio: String

  # Badges attached to this nametag
  badges: [Badge]

  # Time when the nametag was created
  createdAt: Date!

  # Indicates whether the nametag is present in the current room
  present: Boolean

  # Indicates when a user has been mentioned in other rooms
  mentions: [Date]

  # The room where the nametag is posted
  room: Room!

  # Latest visit to this nametag's room by the nametag holder
  latestVisit: Date

}

# A verified component of a user's identity
type Badge {
  # The ID of the badge
  id: ID!

  # The name of the badge
  name: String!

  # The icon for the badge
  icon: String

  # The badges description
  description: String

  # Notes appended to the badge
  notes: [Note]
}

# A note attached to a badge
type Note {

  # The date when the note was created
  date: Date!

  # The text of the note
  text: String!

}

# The queries available for Nametag
type RootQuery {

  # Retrieves a single room based on the id
  room(id:ID!): Room

  # Retrieves all active rooms in the system
  rooms: [Room]

  # Retrieves the current user
  me: User

}

################################################################################
## Mutations
################################################################################

# Response defines what can be expected from any response to a mutation action.
interface Response {

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

## Inputs

# Input required in order to create a room
input CreateRoomInput {

  # The room's title
  title: String!

  # A description for the room
  description: String!

  # The image to be displayed on the room's card
  image: String!

  # The ID of the room's moderator
  mod: CreateNametagInput!

  # An array of the room's norms
  norms: [String!]

  # The date when the room will be closed
  closedAt: Date!

}

# Input required in order to create a message
input CreateMessageInput {

  # The content of the message
  text: String!

  # The nametag ID of the message's author
  author: ID!

  # The optional ID of the message's recipient (if it is a DM)
  recipient: ID

  # The ID of the room where the message takes place
  room: ID!

}

# Input required to create a nametag
input CreateNametagInput {

  # The content of the message
  name: String!

  # The nametag's icon
  icon: String!

  # Additional information about the user
  bio: String!

  # IDs of badges to include in this Nametag
  badges: [ID]

  # The room that this nametag is joining
  room: ID!

}

# Input required to create a badge
input CreateBadgeInput {

  # The name of the badge
  name: String!

  # The badge's icon
  icon: String

  # The badge's description
  description: String!

  # Additional information appended to the badge
  notes: [String]

}

## Responses

# CreateRoomResponse is returned with the room that was created and any
# errors that may have occurred in the attempt to create it.
type CreateRoomResponse implements Response {

  # The comment that was created.
  room: Room

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateMessageResponse is returned with the message that was created and any
# errors that may have occurred in the attempt to create it.
type CreateMessageResponse implements Response {

  # The comment that was created.
  message: Message

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateNametagResponse is returned with the nametag that was created and any
# errors that may have occurred in the attempt to create it.
type CreateNametagResponse implements Response {

  # The comment that was created.
  nametag: Nametag

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# CreateBadgeResponse is returned with the badge that was created and any
# errors that may have occurred in the attempt to create it.
type CreateBadgeResponse implements Response {

  # The comment that was created.
  badge: Badge

  # An array of errors relating to the mutation that occurred.
  errors: [UserError]
}

# The mutations available for Nametag
type RootMutation {

  # Creates a room
  createRoom(room: CreateRoomInput!): CreateRoomResponse

  # Creates a message
  createMessage(message: CreateMessageInput!): CreateMessageResponse

  # Creates a nametag
  createNametag(nametag: CreateNametagInput!): CreateNametagResponse

  # Creates a badge
  createBadge(badge: CreateBadgeInput!): CreateBadgeResponse

}

################################################################################
## Subscriptions
################################################################################

type NametagPresence {

  # The id of the nametag to be updated
  id: ID!

  # Indicates whether the nametag is present
  present: Boolean!

}

type RootSubscription {

  # Fired when a message is added to a room
  messageAdded(room: ID!): Message

  # Fired when a nametag is added to a room
  nametagAdded(room: ID!): Nametag

  # Fired when a nametag's presence changes in a room
  nametagPresence(room: ID!): NametagPresence
}

################################################################################
## Errors
################################################################################

# Any error rendered due to the user's input.
interface UserError {

  # Translation key relating to a translatable string containing details to be
  # displayed to the end user.
  translation_key: String!
}

schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscription
}
