# This is a TOML document

[collections.rooms]

[collections.certificates]

[collections.messages]
[[collections.messages.indexes]]
fields = [["room"]]

[collections.direct_messages]
[[collections.direct_messages.indexes]]
fields = [["room","to"]]

[collections.users]

[collections.user_nametags]
[[collections.user_nametags.indexes]]
fields = [["user"]]

[collections.nametags]
[[collections.nametags.indexes]]
fields = [["room"]]

[groups.admin]
[groups.admin.rules.carte_blanche]
template = "any()"

[groups.default]
[groups.default.rules.read_certificates]
template = "collection('certificates').anyRead()"
[groups.default.rules.read_current_user]
template = "collection('users').find({id: userId()})"
[groups.default.rules.read_messages]
template = "collection('messages').anyRead()"
[groups.default.rules.read_nametags]
template = "collection('nametags').anyRead()"
[groups.default.rules.read_rooms]
template = "collection('rooms').anyRead()"
[groups.default.rules.read_user_nametags]
template = "collection('user_nametags').find({user: userId()})"
[groups.default.rules.read_direct_messages]
template = "collection('direct_messages').anyRead()"
validator = """
  (context, value) => {
    return context.data.nametags && context.data.nametags.indexOf(value.to) > -1
  }
"""
[groups.default.rules.write_certificates]
template = "collection('certificates').anyWrite()"
[groups.authenticated.rules.store_message]
template = "collection('messages').store({author: any(), text: any(), room: any(), timestamp: any(), type: any()})"
validator = """
  (context, value) => {
    return context.data.nametags && context.data.nametags.indexOf(value.author) > -1
  }
"""
[groups.default.rules.write_current_user]
template = "collection('users').update({id: userId(), data: any()})"
[groups.default.rules.write_nametags]
template = "collection('nametags').anyWrite()"
[groups.default.rules.write_rooms]
template = "collection('rooms').anyWrite()"
[groups.default.rules.write_user_nametags]
template = "collection('user_nametags').store({user: userId()}).update({user: userId()})"
[groups.default.rules.write_direct_messages]
template = "collection('direct_messages').{to:any(), author: any(), text: any(), room: any(), timestamp: any(), type: any()}"
validator = """
  (context, value) => {
    return context.data.nametags && context.data.nametags.indexOf(value.author) > -1
  }
"""
